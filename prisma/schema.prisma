// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  adminId      String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  username      String?   @unique
  password      String? // Add the password field
  emailVerified DateTime?
  image         String?
  phone_number  String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  address       Address?

  @@unique([email, username]) // Add this line to make email and username combination unique
  @@map("User") // Add this line to specify the database table name
}

model Orders {
  id            String   @id @default(cuid())
  order_item_id String
  order_items   String
  createdAt     DateTime @default(now())
}

model Order_item {
  id                   String @id @default(cuid())
  category_id          String
  formula              String
  ingredients_id       String
  number_of_liter      Int
  total_extimated_cost Float
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String?
  image       Bytes?
  description String?
  compostions Composition[]
  ingredients Ingredients[]
}

model Composition {
  id               Int           @id @default(autoincrement())
  name             String?
  description      String?
  ingredient_limit String?
  category         Category?     @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  ingredients      Ingredients[]
}

model Ingredients {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  price       Float?
  image       Bytes?
  milliliter  Int?
  quantity    Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category      Category[]
  composition   Composition? @relation(fields: [compositionId], references: [id])
  compositionId Int?
}

model Address {
  id             Int    @id @default(autoincrement())
  user_email     String @unique
  user_id        String
  name           String
  phone_number   String
  email          String
  city           String
  postal_code    Int
  street_address String
  country        String
  user           User   @relation(fields: [user_email], references: [email])
}

enum Role {
  USER
  ADMIN
}
