generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model address {
  id             Int    @id @default(autoincrement())
  user_email     String @unique(map: "Address_user_email_key")
  user_id        String
  name           String
  phone_number   String
  email          String
  city           String
  postal_code    Int
  street_address String
  country        String
  user           user   @relation(fields: [user_email], references: [email], onDelete: NoAction, map: "Address_user_email_fkey")
}

model category {
  id          Int           @id @default(autoincrement())
  name        String?
  description String?
  image       Bytes?
  test        String?
  composition composition[]
  ingredients ingredients[] @relation("categorytoingredients")
}

model composition {
  id               Int           @id @default(autoincrement())
  name             String?
  description      String?
  categoryId       Int?
  ingredient_limit String?
  category         category?     @relation(fields: [categoryId], references: [id], map: "Composition_categoryId_fkey")
  ingredients      ingredients[]

  @@index([categoryId], map: "Composition_categoryId_fkey")
}

model ingredients {
  id            Int          @id @default(autoincrement())
  name          String?
  description   String?
  price         Float?
  image         Bytes?
  quantity      Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  compositionId Int?
  milliliter    Int?
  composition   composition? @relation(fields: [compositionId], references: [id], map: "Ingredients_compositionId_fkey")
  category      category[]   @relation("categorytoingredients")

  @@index([compositionId], map: "Ingredients_compositionId_fkey")
}

model order_item {
  id                   String @id
  category_id          String
  formula              String
  ingredients_id       String
  number_of_liter      Int
  total_extimated_cost Float
}

model orders {
  id            String   @id
  order_item_id String
  order_items   String
  createdAt     DateTime @default(now())
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  adminId      String?
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String    @id
  name          String?
  email         String?   @unique(map: "User_email_key")
  username      String?   @unique(map: "User_username_key")
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  role          user_role @default(USER)
  phone_number  String?
  account       account[]
  address       address?
  session       session[]

  @@unique([email, username], map: "User_email_username_key")
}

enum user_role {
  USER
  ADMIN
}
